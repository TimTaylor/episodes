[{"path":"https://nhs-r-community.github.io/NHSRepisodes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 episodes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://nhs-r-community.github.io/NHSRepisodes/articles/NHSRepisodes.html","id":"stays","dir":"Articles","previous_headings":"Terminology","what":"Stays","title":"Hospital episode examples","text":"Hospitals may record data according bed stays, ward stays -patient stays (episode) used record people move around hospital.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/articles/NHSRepisodes.html","id":"entering-and-leaving-hospital","dir":"Articles","previous_headings":"Terminology","what":"Entering and leaving hospital","title":"Hospital episode examples","text":"patient attend something like Accident Emergency - &E (also known Emergency Department acronym ED) stay hospital becomes admission. Leaving hospital service (can also occur outpatients person isn’t admitted stay period) called discharge.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/articles/NHSRepisodes.html","id":"journey-as-recorded-in-data","dir":"Articles","previous_headings":"Terminology","what":"Journey as recorded in data","title":"Hospital episode examples","text":"Patients can moved beds ward, moved wards hospital overall -patient stay long hospital.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/articles/NHSRepisodes.html","id":"out-of-area","dir":"Articles","previous_headings":"Terminology","what":"Out of area","title":"Hospital episode examples","text":"services, like mental health, may record move another hospital case mental health record area. Even “stays” actual time patient service, commissioned part service, count one , records different systems, may either overlap join together. example, mental health patient local service, moves, gap day two likely administrative error. example delay patient moved one hospital Sunday recording takes place Monday even Tuesday Monday public holiday. order record move patient discharged although, actuality still healthcare services.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/articles/NHSRepisodes.html","id":"using-nhsrepisodes","dir":"Articles","previous_headings":"","what":"Using NHSRepisodes","title":"Hospital episode examples","text":"may analyst access data related stay hospital, beds, ward, overall stay something like SQL warehouse case ’s likely dates reasonably accurate. However, overlapping data affect overall counts one stay look like two entries. also affect counts days see bed occupancy one person appear twice double counted. many ways around issues double counting package NHSRepisodes quick efficient functions R can change add column information episodes data. Find episodes add column data: patient gap days inpatient area stay appears, currently, two intervals (episodes). adjust add days discharge (end) column according appropriate data. Rather adding column data, possible use function merge_episodes() return one row episode. Using last example days added end (discharge) close area gap:","code":"library(dplyr) library(NHSRepisodes)  services <- tibble::tribble(   ~code, ~service, ~type,   \"t100\", \"service A\", \"inpatient\",   \"t200\", \"service B\", \"inpatient\",   \"t500\", \"service C\", \"inpatient\",   \"t600\", \"service D\", \"out of area\" )  # Create a dummy data set give the first and last dates of an episode # using withr package to  dat <- tribble(   ~patient_id, ~admission, ~discharge, ~code, ~notes,   1L, \"2020-01-01\", \"2020-01-10\", \"t100\", NA,   1L, \"2020-01-12\", \"2020-01-22\", \"t600\", \"this has a gap\",   # 2L, \"2020-04-01\", \"2020-04-30\", \"t100\", NA,   # 2L, \"2020-04-15\", \"2020-04-16\", \"t200\", NA,   # 2L, \"2020-04-17\", \"2020-04-19\", \"t500\", NA,   1L, \"2020-05-01\", \"2020-10-01\", \"t100\", NA,   1L, \"2020-10-01\", \"2020-11-01\", \"t600\", \"same day overlap\" ) |>   # columns must be date format to work with NHSRepisodes functions   mutate(across(admission:discharge, as.Date)) |>   left_join(services) |>   arrange(patient_id, admission) #> Joining with `by = join_by(code)` dat |>   # Rename the columns so that they are recognised by the `add_parent_interval()` function   select(     id = patient_id,     start = admission,     end = discharge,     everything()   ) |>   NHSRepisodes::add_parent_interval() #> # A tibble: 4 × 10 #>      id start      end        code  notes            service type  .parent_start #>   <int> <date>     <date>     <chr> <chr>            <chr>   <chr> <date>        #> 1     1 2020-01-01 2020-01-10 t100  NA               servic… inpa… 2020-01-01    #> 2     1 2020-01-12 2020-01-22 t600  this has a gap   servic… out … 2020-01-12    #> 3     1 2020-05-01 2020-10-01 t100  NA               servic… inpa… 2020-05-01    #> 4     1 2020-10-01 2020-11-01 t600  same day overlap servic… out … 2020-05-01    #> # ℹ 2 more variables: .parent_end <date>, .interval_number <int> dat |>   # Rename the columns so that they are recognised by the `add_parent_interval()` function   select(     id = patient_id,     start = admission,     end_actual = discharge,     everything()   ) |>   mutate(end = end_actual + 2) |>   NHSRepisodes::add_parent_interval() #> # A tibble: 4 × 11 #>      id start      end_actual code  notes service type  end        .parent_start #>   <int> <date>     <date>     <chr> <chr> <chr>   <chr> <date>     <date>        #> 1     1 2020-01-01 2020-01-10 t100  NA    servic… inpa… 2020-01-12 2020-01-01    #> 2     1 2020-01-12 2020-01-22 t600  this… servic… out … 2020-01-24 2020-01-01    #> 3     1 2020-05-01 2020-10-01 t100  NA    servic… inpa… 2020-10-03 2020-05-01    #> 4     1 2020-10-01 2020-11-01 t600  same… servic… out … 2020-11-03 2020-05-01    #> # ℹ 2 more variables: .parent_end <date>, .interval_number <int> dat |>   # Rename the columns so that they are recognised by the `add_parent_interval()` function   select(     id = patient_id,     start = admission,     end_actual = discharge,     everything()   ) |>   mutate(end = end_actual + 2) |>   NHSRepisodes::merge_episodes() #> # A tibble: 2 × 4 #>      id .interval_number .episode_start .episode_end #>   <int>            <int> <date>         <date>       #> 1     1                1 2020-01-01     2020-01-24   #> 2     1                2 2020-05-01     2020-11-03"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zoë Turner. Author, maintainer. Tim Taylor. Author. NHS R. Copyright holder.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner Z, Taylor T (2024). NHSRepisodes: Package Relating Hospital Episode Intervals. R package version 0.1.0.9000, https://nhs-r-community.github.io/NHSRepisodes/.","code":"@Manual{,   title = {NHSRepisodes: Package Relating to Hospital Episode Intervals},   author = {Zoë Turner and Tim Taylor},   year = {2024},   note = {R package version 0.1.0.9000},   url = {https://nhs-r-community.github.io/NHSRepisodes/}, }"},{"path":[]},{"path":"https://nhs-r-community.github.io/NHSRepisodes/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Package Relating to Hospital Episode Intervals","text":"can install development version package GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"https://github.com/nhs-r-community/NHSRepisodes\")"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Package Relating to Hospital Episode Intervals","text":"NHSRepisodes (hopefully) temporary solution small inconvenience relates data.table, dplyr ivs; namely dplyr currently slow working large number groupings data.table easily support record class ivs intervals based. expand issues consider following small set episode data: {ivs} package provides elegant way find minimum spanning interval across episodes: Note {ivs} creates intervals right-open meaning inclusive left (opening square bracket [) exclusive right (closing rounded bracket )). Consequently, first call mutate() added 1 end value. ensures full range dates considered (e.g. first row want consider days 2020-01-01 2020-01-10 2020-01-09). works great small number ids group . However, becomes noticeably slow larger number: already using , likely time reach {data.table} package. Unfortunately interval class created {ivs} built upon record type vctrs, class supported {data.table}: can go steps get comparable answer still find slightly slower performance: NHSRepisodes solves merge_episodes() function: also provide another function add_parent_interval() associates minimum spanning interval observation without reducing unique values:","code":"library(NHSRepisodes) library(dplyr) library(ivs) library(data.table)  # note - we need functionality introduced in dplyr 1.1.0. if (getNamespaceVersion(\"dplyr\") < \"1.1.0\") {     warning(\"Please update dplyr to version 1.1.0 or higher to run these examples.\")     knitr::knit_exit() }  # Let's note the package versions used in generating this README packages <- c(\"NHSRepisodes\", \"dplyr\", \"data.table\", \"ivs\") mutate(tibble(packages), version = sapply(packages, getNamespaceVersion)) #> # A tibble: 4 × 2 #>   packages     version    #>   <chr>        <chr>      #> 1 NHSRepisodes 0.1.0.9000 #> 2 dplyr        1.1.4.9000 #> 3 data.table   1.16.0     #> 4 ivs          0.2.0  # Create a dummy data set give the first and last dates of an episode dat <- tribble(     ~id, ~start, ~end,     1L, \"2020-01-01\", \"2020-01-10\",     1L, \"2020-01-03\", \"2020-01-10\",     2L, \"2020-04-01\", \"2020-04-30\",     2L, \"2020-04-15\", \"2020-04-16\",     2L, \"2020-04-17\", \"2020-04-19\",     1L, \"2020-05-01\", \"2020-10-01\",     1L, \"2020-01-01\", \"2020-01-10\",     1L, \"2020-01-11\", \"2020-01-12\", )  # This will create an object called dat and also open in the console (dat <- mutate(dat, across(start:end, as.Date))) #> # A tibble: 8 × 3 #>      id start      end        #>   <int> <date>     <date>     #> 1     1 2020-01-01 2020-01-10 #> 2     1 2020-01-03 2020-01-10 #> 3     2 2020-04-01 2020-04-30 #> 4     2 2020-04-15 2020-04-16 #> 5     2 2020-04-17 2020-04-19 #> 6     1 2020-05-01 2020-10-01 #> 7     1 2020-01-01 2020-01-10 #> 8     1 2020-01-11 2020-01-12 dat |>     mutate(interval = iv(start = start, end = end + 1)) |>     reframe(interval = iv_groups(interval, abutting = FALSE), .by = id) #> # A tibble: 4 × 2 #>      id                 interval #>   <int>               <iv<date>> #> 1     1 [2020-01-01, 2020-01-11) #> 2     1 [2020-01-11, 2020-01-13) #> 3     1 [2020-05-01, 2020-10-02) #> 4     2 [2020-04-01, 2020-05-01) # Creating a larger data set n <- 125000 id2 <- sample(seq_len(n), size = n * 5, replace = TRUE) start2 <- as.Date(\"2020-01-01\") + sample.int(365, size = n * 5, replace = TRUE) end2 <- start2 + sample(1:100, size = n * 5, replace = TRUE)  # creates the object big_dat and shows the first 10 rows as a tibble in the console (big_dat <- tibble(id = id2, start = start2, end = end2)) #> # A tibble: 625,000 × 3 #>       id start      end        #>    <int> <date>     <date>     #>  1 90983 2020-02-07 2020-03-18 #>  2 59640 2020-07-05 2020-08-13 #>  3 29543 2020-04-05 2020-05-28 #>  4 17962 2020-06-07 2020-07-21 #>  5 13032 2020-08-25 2020-09-08 #>  6 94348 2020-05-11 2020-06-07 #>  7  7770 2020-03-18 2020-04-03 #>  8  9570 2020-09-25 2020-12-04 #>  9 86687 2020-11-04 2021-01-09 #> 10 66213 2020-04-09 2020-04-16 #> # ℹ 624,990 more rows  # checking the time to run system.time(     out_dplyr <-          big_dat |>         mutate(interval = iv(start, end + 1)) |>         reframe(interval = iv_groups(interval, abutting = FALSE), .by = id) ) #>    user  system elapsed  #>  13.870   0.065  13.996 DT <- as.data.table(big_dat) DT[, interval := iv(start, end + 1)] #> Error in `[.data.table`(DT, , `:=`(interval, iv(start, end + 1))): Supplied 2 items to be assigned to 625000 items of column 'interval'. If you wish to 'recycle' the RHS please use rep() to make this intent clear to readers of your code. fun <- function(s, e) {     interval <- iv(s, e)     groups <- iv_groups(interval, abutting = FALSE)     list(start = iv_start(groups), end = iv_end(groups)) }  system.time(out_dt <- DT[, fun(start, end + 1), by = id]) #>    user  system elapsed  #>  14.972   0.022  14.984 merge_episodes(big_dat) #> # A tibble: 334,767 × 4 #>       id .interval_number .episode_start .episode_end #>    <int>            <int> <date>         <date>       #>  1     1                1 2020-04-16     2020-06-23   #>  2     2                1 2020-01-12     2020-02-22   #>  3     2                2 2020-07-22     2020-08-16   #>  4     2                3 2020-09-27     2021-01-11   #>  5     3                1 2020-01-06     2020-03-02   #>  6     3                2 2020-03-08     2020-03-16   #>  7     3                3 2020-06-05     2020-08-26   #>  8     4                1 2020-02-05     2020-05-03   #>  9     4                2 2020-05-19     2020-09-08   #> 10     5                1 2020-01-14     2020-03-13   #> # ℹ 334,757 more rows  # And for comparison with earlier timings system.time(out <- merge_episodes(big_dat)) #>    user  system elapsed  #>   0.917   0.000   0.335  # equal output (subject to ordering) out <- out |>      mutate(interval = iv(start = .episode_start, end = .episode_end + 1)) |>      select(id, interval)  out_dplyr <- arrange(out_dplyr, id, interval)  out_dt <- out_dt |>      as.data.frame() |>      as_tibble() |>      mutate(interval = iv(start = start, end = end)) |>      select(id, interval) |>      arrange(id, interval)  all.equal(out, out_dplyr) #> [1] TRUE all.equal(out, out_dt) #> [1] TRUE add_parent_interval(dat) #> # A tibble: 8 × 6 #>      id start      end        .parent_start .parent_end .interval_number #>   <int> <date>     <date>     <date>        <date>                 <int> #> 1     1 2020-01-01 2020-01-10 2020-01-01    2020-01-10                 1 #> 2     1 2020-01-03 2020-01-10 2020-01-01    2020-01-10                 1 #> 3     2 2020-04-01 2020-04-30 2020-04-01    2020-04-30                 1 #> 4     2 2020-04-15 2020-04-16 2020-04-01    2020-04-30                 1 #> 5     2 2020-04-17 2020-04-19 2020-04-01    2020-04-30                 1 #> 6     1 2020-05-01 2020-10-01 2020-05-01    2020-10-01                 3 #> 7     1 2020-01-01 2020-01-10 2020-01-01    2020-01-10                 1 #> 8     1 2020-01-11 2020-01-12 2020-01-11    2020-01-12                 2"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/NHSRepisodes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"NHSRepisodes: Package Relating to Hospital Episode Intervals — NHSRepisodes-package","title":"NHSRepisodes: Package Relating to Hospital Episode Intervals — NHSRepisodes-package","text":"Hospital episodes can overlap gaps can result counting. package contains functions can used rectify common analytical issue NHS data.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/NHSRepisodes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NHSRepisodes: Package Relating to Hospital Episode Intervals — NHSRepisodes-package","text":"Maintainer: Zoë Turner zoe.turner3@nhs.net (ORCID) Authors: Tim Taylor tim.taylor@hiddenelephants.co.uk (ORCID) contributors: NHS R [copyright holder]","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/add_parent_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate parent intervals — add_parent_interval","title":"Calculate parent intervals — add_parent_interval","text":"add_parent_interval() calculates minimum spanning interval contains overlapping episodes adds input. Methods provided data.frame like objects.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/add_parent_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate parent intervals — add_parent_interval","text":"","code":"add_parent_interval(x, ...)  # Default S3 method add_parent_interval(x, ...)  # S3 method for class 'data.table' add_parent_interval(x, id = \"id\", start = \"start\", end = \"end\", ...)  # S3 method for class 'tbl_df' add_parent_interval(x, id = \"id\", start = \"start\", end = \"end\", ...)  # S3 method for class 'data.frame' add_parent_interval(x, id = \"id\", start = \"start\", end = \"end\", ...)"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/add_parent_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate parent intervals — add_parent_interval","text":"x R object. ... currently used. id [character] Variable x representing id associated episode. start [character] Variable x representing start episode. Must refer variable either class <Date> <POSIXct>. end [character] Variable x representing start episode. Must refer variable class start.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/add_parent_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate parent intervals — add_parent_interval","text":"input data additional columns corresponding parent interval (split across id values). Additional columns labelled '.parent_start', '.parent_end' '.interval_number' interval number order occurrence corresponding parent interval. returned object class input x (.e. data.frame, data.table tibble).","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/add_parent_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate parent intervals — add_parent_interval","text":"","code":"dat <- data.frame(     id = c(1, 1, 2, 2, 2, 1),     start = as.Date(c(         \"2020-01-01\", \"2020-01-03\", \"2020-04-01\",         \"2020-04-15\", \"2020-04-17\", \"2020-05-01\"     )),     end = as.Date(c(         \"2020-01-10\", \"2020-01-10\", \"2020-04-30\",         \"2020-04-16\", \"2020-04-19\", \"2020-10-01\"     )) )  add_parent_interval(dat) #>   id      start        end .parent_start .parent_end .interval_number #> 1  1 2020-01-01 2020-01-10    2020-01-01  2020-01-10                1 #> 2  1 2020-01-03 2020-01-10    2020-01-01  2020-01-10                1 #> 3  2 2020-04-01 2020-04-30    2020-04-01  2020-04-30                1 #> 4  2 2020-04-15 2020-04-16    2020-04-01  2020-04-30                1 #> 5  2 2020-04-17 2020-04-19    2020-04-01  2020-04-30                1 #> 6  1 2020-05-01 2020-10-01    2020-05-01  2020-10-01                2"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/merge_episodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge overlapping episodes — merge_episodes","title":"Merge overlapping episodes — merge_episodes","text":"merge_episodes() combines overlapping episodes minimal spanning interval split individual identifier. Methods provided data.frame like objects.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/merge_episodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge overlapping episodes — merge_episodes","text":"","code":"merge_episodes(x, ...)  # Default S3 method merge_episodes(x, ...)  # S3 method for class 'data.table' merge_episodes(x, id = \"id\", start = \"start\", end = \"end\", ...)  # S3 method for class 'tbl_df' merge_episodes(x, id = \"id\", start = \"start\", end = \"end\", ...)  # S3 method for class 'data.frame' merge_episodes(x, id = \"id\", start = \"start\", end = \"end\", ...)"},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/merge_episodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge overlapping episodes — merge_episodes","text":"x R object. ... currently used. id [character] Variable x representing id associated episode. start [character] Variable x representing start episode. Must refer variable either class <Date> <POSIXct>. end [character] Variable x representing start episode. Must refer variable class start.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/merge_episodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge overlapping episodes — merge_episodes","text":"resulting combined episode intervals split id ordered interval number. returned object class input x (.e. data.frame, data.table tibble).","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/reference/merge_episodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge overlapping episodes — merge_episodes","text":"","code":"dat <- data.frame(     id = c(1, 1, 2, 2, 2, 1),     start = as.Date(c(         \"2020-01-01\", \"2020-01-03\", \"2020-04-01\",         \"2020-04-15\", \"2020-04-17\", \"2020-05-01\"     )),     end = as.Date(c(         \"2020-01-10\", \"2020-01-10\", \"2020-04-30\",         \"2020-04-16\", \"2020-04-19\", \"2020-10-01\"     )) )  merge_episodes(dat) #>   id .interval_number .episode_start .episode_end #> 1  1                1     2020-01-01   2020-01-10 #> 2  1                2     2020-05-01   2020-10-01 #> 3  2                1     2020-04-01   2020-04-30"},{"path":[]},{"path":"https://nhs-r-community.github.io/NHSRepisodes/news/index.html","id":"nhsrepisodes-010","dir":"Changelog","previous_headings":"","what":"NHSRepisodes 0.1.0","title":"NHSRepisodes 0.1.0","text":"first (significant) release NHSRepisodes package. Since earlier, proof concept version package, minor changes early adopters may observe: Fixed bugs add_parent_interval(): one ensure row ordering preserved second prevent dropping non-specified columns. included README now makes use recent additions within {dplyr} require version 1.1.0 (later) examples run. Dependencies {rlang} {cli} dropped.","code":""},{"path":"https://nhs-r-community.github.io/NHSRepisodes/news/index.html","id":"nhsrepisodes-0009000","dir":"Changelog","previous_headings":"","what":"NHSRepisodes 0.0.0.9000","title":"NHSRepisodes 0.0.0.9000","text":"Proof concept / initial development version package.","code":""}]
